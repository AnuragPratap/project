{"version":3,"file":"static/js/959.79dc6839.chunk.js","mappings":"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","sources":["components/CoinsTable.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { CryptoState } from \"../CryptoContext\";\r\nimport {\r\n  Container,\r\n  LinearProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  ThemeProvider,\r\n  Typography,\r\n  createTheme,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { numberWithCommas } from \"./Banner/Carousel\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\n\r\nconst useStyles = makeStyles({\r\n  row: {\r\n    backgroundColor: \"#16171a\",\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#131111\",\r\n    },\r\n    fontFamily: \"Montserrat\",\r\n  },\r\n  pagination: {\r\n    \"& .MuiPaginationItem-root\": {\r\n      color: \"gold\",\r\n    },\r\n  },\r\n});\r\n\r\nconst CoinsTable = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n\r\n  const { currency, symbol, coins, loading, fetchCoins } = CryptoState();\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate(); //used in place of useHistory\r\n\r\n  const darkTheme = createTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#fff\",\r\n      },\r\n      type: \"dark\",\r\n    },\r\n  });\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    fetchCoins();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currency]);\r\n\r\n  const handleSearch = () => {\r\n    return coins.filter(\r\n      (coin) =>\r\n        coin.name.toLowerCase().includes(search) ||\r\n        coin.symbol.toLowerCase().includes(search)\r\n    );\r\n  };\r\n\r\n\r\n  // if (Math.random() > 0.5) return new Error(\"Test Error Boundary\");\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <Container style={{ textAlign: \"center\" }}>\r\n        <Typography\r\n          variant=\"h4\"\r\n          style={{ margin: 18, fontFamily: \"Montserrat\" }}\r\n        >\r\n          Crypto-currency Prices by Market Cap\r\n        </Typography>\r\n        <TextField\r\n          label=\"Search for a Crypto Currency..\"\r\n          variant=\"outlined\"\r\n          style={{ marginBottom: 20, width: \"75%\" }}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        />\r\n        <TableContainer>\r\n          {loading ? (\r\n            <LinearProgress style={{ backgroundColor: \"gold\" }} />\r\n          ) : (\r\n            <Table>\r\n              <TableHead style={{ backgroundColor: \"#EEBC1D\" }}>\r\n                <TableRow>\r\n                  {[\"Coin\", \"Price\", \"24h Change\", \"Market Cap\"].map((head) => (\r\n                    <TableCell\r\n                      style={{\r\n                        color: \"black\",\r\n                        fontWeight: \"700\",\r\n                        fontFamily: \"Montserrat\",\r\n                      }}\r\n                      key={head}\r\n                      align={head === \"Coin\" ? \"\" : \"right\"}\r\n                    >\r\n                      {head}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {handleSearch()\r\n                  .slice((page - 1) * 10, (page - 1) * 10 + 10)\r\n                  .map((row) => {\r\n                    const profit = row.price_change_percentage_24h > 0;\r\n                    return (\r\n                      <TableRow\r\n                        onClick={() => navigate(`/coins/${row.id}`)}\r\n                        className={classes.row}\r\n                        key={row.name}\r\n                      >\r\n                        <TableCell\r\n                          component=\"th\"\r\n                          scope=\"row\"\r\n                          style={{\r\n                            display: \"flex\",\r\n                            gap: 15,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={row?.image}\r\n                            alt={row.name}\r\n                            height=\"50\"\r\n                            style={{ marginBottom: 10 }}\r\n                          />\r\n                          <div\r\n                            style={{ display: \"flex\", flexDirection: \"column\" }}\r\n                          >\r\n                            <span\r\n                              style={{\r\n                                textTransform: \"uppercase\",\r\n                                fontSize: 22,\r\n                              }}\r\n                            >\r\n                              {row.symbol}\r\n                            </span>\r\n                            <span style={{ color: \"darkgrey\" }}>\r\n                              {row.name}\r\n                            </span>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {symbol}{\" \"}\r\n                          {numberWithCommas(row.current_price.toFixed(2))}\r\n                        </TableCell>\r\n                        <TableCell\r\n                          align=\"right\"\r\n                          style={{\r\n                            color: profit > 0 ? \"rgb(14, 203, 129)\" : \"red\",\r\n                            fontWeight: 500,\r\n                          }}\r\n                        >\r\n                          {profit && \"+\"}\r\n                          {row.price_change_percentage_24h.toFixed(2)}%\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {symbol}{\" \"}\r\n                          {numberWithCommas(\r\n                            row.market_cap.toString().slice(0, -6)\r\n                          )}\r\n                          M\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </TableContainer>\r\n        <Pagination\r\n          count={(handleSearch()?.length / 10).toFixed(0)}\r\n          style={{\r\n            padding: 20,\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n          classes={{ ul: classes.pagination }}\r\n          onChange={(_, value) => {\r\n            setPage(value);\r\n            window.scroll(0, 450);\r\n          }}\r\n        />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default CoinsTable;\r\n"],"names":["useStyles","makeStyles","row","backgroundColor","cursor","fontFamily","pagination","color","CoinsTable","_handleSearch","search","setSearch","useState","page","setPage","currency","symbol","coins","loading","fetchCoins","CryptoState","classes","navigate","useNavigate","darkTheme","createTheme","palette","primary","main","type","useEffect","handleSearch","filter","coin","name","toLowerCase","includes","_jsx","ThemeProvider","theme","children","_jsxs","Container","style","textAlign","Typography","variant","margin","TextField","label","marginBottom","width","onChange","e","target","value","TableContainer","LinearProgress","Table","TableHead","TableRow","map","head","TableCell","fontWeight","align","TableBody","slice","profit","price_change_percentage_24h","onClick","concat","id","className","component","scope","display","gap","src","image","alt","height","flexDirection","textTransform","fontSize","numberWithCommas","current_price","toFixed","market_cap","toString","Pagination","count","length","padding","justifyContent","ul","_","window","scroll"],"sourceRoot":""}